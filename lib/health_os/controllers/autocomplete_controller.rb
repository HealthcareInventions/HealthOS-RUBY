# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module HealthOs
  class AutocompleteController < BaseController
    @@instance = AutocompleteController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # TODO: Add Description
    # @param [String] exercise_query Required parameter: Example: 
    # @return Mixed response from the API call
    def get_exercises(exercise_query)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/autocomplete/exercises/{exercise_query}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'exercise_query' => exercise_query
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # TODO: Add Description
    # @param [String] disease_query Required parameter: Example: 
    # @return Mixed response from the API call
    def get_diseases(disease_query)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/autocomplete/diseases/{disease_query}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'disease_query' => disease_query
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # TODO: Add Description
    # @param [String] lab_test_query Required parameter: Example: 
    # @return Mixed response from the API call
    def get_lab_tests(lab_test_query)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/autocomplete/lab_tests/{lab_test_query}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'lab_test_query' => lab_test_query
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # TODO: Add Description
    # @param [String] food_item_query Required parameter: Example: 
    # @return Mixed response from the API call
    def get_food_items(food_item_query)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/autocomplete/food/items/{food_item_query}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'food_item_query' => food_item_query
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # TODO: Add Description
    # @param [String] generic_query Required parameter: Example: 
    # @return Mixed response from the API call
    def get_generics(generic_query)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/autocomplete/medicines/generics/{generic_query}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'generic_query' => generic_query
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # TODO: Add Description
    # @param [String] medicine_query Required parameter: Example: 
    # @return Mixed response from the API call
    def get_medicines(medicine_query)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/autocomplete/medicines/brands/{medicine_query}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'medicine_query' => medicine_query
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end
  end
end
