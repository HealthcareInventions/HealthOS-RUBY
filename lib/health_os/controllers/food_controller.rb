# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module HealthOs
  class FoodController < BaseController
    @@instance = FoodController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # TODO: Add Description
    # @param [String] food_restaurant_query Required parameter: Example: 
    # @return Mixed response from the API call
    def search_food_restaurants(food_restaurant_query)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/search/food/restaurants/{food_restaurant_query}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'food_restaurant_query' => food_restaurant_query
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # TODO: Add Description
    # @param [Integer] page Required parameter: Example: 
    # @param [Integer] size Required parameter: Example: 
    # @return Mixed response from the API call
    def get_all_food_brands(page, 
                            size)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/food/brands'
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'page' => page,
        'size' => size
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # TODO: Add Description
    # @param [Integer] page Required parameter: Example: 
    # @param [Integer] size Required parameter: Example: 
    # @param [String] food_restaurant_id Required parameter: Example: 
    # @return Mixed response from the API call
    def get_food_items_by_restaurant(page, 
                                     size, 
                                     food_restaurant_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/food/restaurants/{food_restaurant_id}/items'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'food_restaurant_id' => food_restaurant_id
      }
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'page' => page,
        'size' => size
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # TODO: Add Description
    # @param [String] food_brand_query Required parameter: Example: 
    # @return Mixed response from the API call
    def search_food_brands(food_brand_query)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/search/food/brands/{food_brand_query}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'food_brand_query' => food_brand_query
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # TODO: Add Description
    # @param [String] food_item_id Required parameter: Example: 
    # @return Mixed response from the API call
    def get_food_item(food_item_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/food/items/{food_item_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'food_item_id' => food_item_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # TODO: Add Description
    # @param [Integer] page Required parameter: Example: 
    # @param [Integer] size Required parameter: Example: 
    # @return Mixed response from the API call
    def get_all_food_items(page, 
                           size)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/food/items'
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'page' => page,
        'size' => size
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # TODO: Add Description
    # @param [String] food_item_query Required parameter: Example: 
    # @return Mixed response from the API call
    def search_food_items(food_item_query)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/search/food/items/{food_item_query}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'food_item_query' => food_item_query
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # TODO: Add Description
    # @param [Integer] page Required parameter: Example: 
    # @param [Integer] size Required parameter: Example: 
    # @return Mixed response from the API call
    def get_all_food_restaurants(page, 
                                 size)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/food/restaurants'
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'page' => page,
        'size' => size
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # TODO: Add Description
    # @param [Integer] page Required parameter: Example: 
    # @param [Integer] size Required parameter: Example: 
    # @param [String] food_brand_id Required parameter: Example: 
    # @return Mixed response from the API call
    def get_food_items_by_brand(page, 
                                size, 
                                food_brand_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup % [Configuration.host]
      _query_builder << '/food/brands/{food_brand_id}/items'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'food_brand_id' => food_brand_id
      }
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'page' => page,
        'size' => size
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end
  end
end
